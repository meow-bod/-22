-- 1. Create swipes table
CREATE TABLE public.swipes (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ WITH TIME ZONE DEFAULT NOW() NOT NULL,
  swiper_pet_id BIGINT REFERENCES public.pets(id) ON DELETE CASCADE NOT NULL,
  swiped_pet_id BIGINT REFERENCES public.pets(id) ON DELETE CASCADE NOT NULL,
  liked BOOLEAN NOT NULL,
  CONSTRAINT unique_swipe UNIQUE (swiper_pet_id, swiped_pet_id)
);

-- 2. Create matches table
CREATE TABLE public.matches (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at TIMESTAMPTZ WITH TIME ZONE DEFAULT NOW() NOT NULL,
  pet1_id BIGINT REFERENCES public.pets(id) ON DELETE CASCADE NOT NULL,
  pet2_id BIGINT REFERENCES public.pets(id) ON DELETE CASCADE NOT NULL,
  CONSTRAINT unique_match UNIQUE (pet1_id, pet2_id)
);

-- 3. Enable RLS for new tables
ALTER TABLE public.swipes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.matches ENABLE ROW LEVEL SECURITY;

-- 4. Create RLS policies for swipes
-- Users can insert their own swipes
CREATE POLICY "Users can insert their own swipes" ON public.swipes
  FOR INSERT
  WITH CHECK (auth.uid() = (SELECT owner_id FROM public.pets WHERE id = swiper_pet_id));

-- Users can see their own swipes
CREATE POLICY "Users can see their own swipes" ON public.swipes
  FOR SELECT
  USING (auth.uid() = (SELECT owner_id FROM public.pets WHERE id = swiper_pet_id));

-- 5. Create RLS policies for matches
-- Users can see matches involving their pets
CREATE POLICY "Users can see their own matches" ON public.matches
  FOR SELECT
  USING (auth.uid() IN (
    (SELECT owner_id FROM public.pets WHERE id = pet1_id),
    (SELECT owner_id FROM public.pets WHERE id = pet2_id)
  ));

-- 6. Create a function to handle creating a match
CREATE OR REPLACE FUNCTION public.handle_new_swipe()
RETURNS TRIGGER
LANGUAGE plpgsql
SECURITY DEFINER
AS $$
DECLARE
  is_match BOOLEAN;
BEGIN
  -- Check if the other user has already liked back
  SELECT EXISTS (
    SELECT 1
    FROM public.swipes
    WHERE swiper_pet_id = NEW.swiped_pet_id
      AND swiped_pet_id = NEW.swiper_pet_id
      AND liked = TRUE
  ) INTO is_match;

  -- If it's a match, insert into the matches table
  IF NEW.liked AND is_match THEN
    INSERT INTO public.matches (pet1_id, pet2_id)
    VALUES (NEW.swiper_pet_id, NEW.swiped_pet_id);
  END IF;

  RETURN NEW;
END;
$$;

-- 7. Create a trigger to call the function after a new swipe is inserted
CREATE TRIGGER on_new_swipe_create_match
  AFTER INSERT ON public.swipes
  FOR EACH ROW
  EXECUTE PROCEDURE public.handle_new_swipe();